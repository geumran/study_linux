=======================
IRQ-flags state tracing
=======================

:Author: started by Ingo Molnar <mingo@redhat.com>

"irq-flags tracing"기능은 hardirq 및 softirq 상태를 "추적"합니다.
관심있는 하위 시스템에 커널에서 발생하는 모든 hardirqs-off / hardirqs-on,
softirqs-off / softirqs-on 이벤트에 대한 알림을 받을 수 있는 기회를 제공합니다 .
The "irq-flags tracing" feature "traces" hardirq and softirq state, in
that it gives interested subsystems an opportunity to be notified of
every hardirqs-off/hardirqs-on, softirqs-off/softirqs-on event that
happens in the kernel.

CONFIG_TRACE_IRQFLAGS_SUPPORT는 CONFIG_PROVE_SPIN_LOCKING 및 CONFIG_PROVE_RW_LOCKING이
일반 잠금 디버깅 코드에 의해 제공되기 위해 필요합니다. 그렇지 않으면 아키텍처에서
CONFIG_PROVE_MUTEX_LOCKING 및 CONFIG_PROVE_RWSEM_LOCKING 만 제공됩니다.
이는 IRQ 컨텍스트에서 사용되지 않는 API를 잠그는 것입니다.
(rwsems에 대한 한 가지 예외는 해결되었습니다)
CONFIG_TRACE_IRQFLAGS_SUPPORT is needed for CONFIG_PROVE_SPIN_LOCKING
and CONFIG_PROVE_RW_LOCKING to be offered by the generic lock debugging
code. Otherwise only CONFIG_PROVE_MUTEX_LOCKING and
CONFIG_PROVE_RWSEM_LOCKING will be offered on an architecture - these
are locking APIs that are not used in IRQ context. (the one exception
for rwsems is worked around)

많은 저수준 어셈블리 코드가 irq-flags 상태 변경을 다루기 때문에 이것에 대한
아키텍처 지원은 "사소한"범주에있는 것은 아닙니다. 그러나 아키텍처는
irq-flags-tracing을 다소 간단하고 위험없이 사용할 수 있습니다.
Architecture support for this is certainly not in the "trivial"
category, because lots of lowlevel assembly code deal with irq-flags
state changes. But an architecture can be irq-flags-tracing enabled in a
rather straightforward and risk-free manner.

먼저 두 가지 코드 조직 변경을 수행해야하는 아키텍처를 지원해야합니다.
Architectures that want to support this need to do a couple of
code-organizational changes first:

- 아치 수준의 Kconfig 파일에서 TRACE_IRQFLAGS_SUPPORT를 추가하고 활성화하십시오.
- add and enable TRACE_IRQFLAGS_SUPPORT in their arch level Kconfig file

그리고 irq-flags-tracing 지원을 구현하기 위해 몇 가지 기능적 변경이 필요하다.
and then a couple of functional changes are needed as well to implement
irq-flags-tracing support:

- 하위 레벨 항목 코드에서 trace_hardirqs_off () / trace_hardirqs_on ()
 함수에 대한 (빌드 조건부) 호출을 추가합니다. 락 밸리데이터는 '실제'irq-flags가
 '가상'irq-flag 상태와 일치 하는지를 면밀히 관찰하고, 두 가지가 일치하지 않으면
 큰 소리로 불평합니다. 보통 irq-flags-tracing에 대한 arch 지원의 대부분은
 lockdep complaint를보고 아직 다루지 않은 어셈블리 코드를 찾아서 수정하고 반복한다.
 일단 시스템이 부팅되고 irq-flags-tracing 함수에서 lockdep 불만없이 작동하면 아치 지원이 완료됩니다.
- in lowlevel entry code add (build-conditional) calls to the
  trace_hardirqs_off()/trace_hardirqs_on() functions. The lock validator
  closely guards whether the 'real' irq-flags matches the 'virtual'
  irq-flags state, and complains loudly (and turns itself off) if the
  two do not match. Usually most of the time for arch support for
  irq-flags-tracing is spent in this state: look at the lockdep
  complaint, try to figure out the assembly code we did not cover yet,
  fix and repeat. Once the system has booted up and works without a
  lockdep complaint in the irq-flags-tracing functions arch support is
  complete.

- 아키텍처에 마스크 할 수없는 인터럽트가있는 경우 lockdep_off () /
lockdep_on ()을 통해 irq 추적 [및 잠금 유효성 검사] 메커니즘에서 제외해야 합니다.
- if the architecture has non-maskable interrupts then those need to be
  excluded from the irq-tracing [and lock validation] mechanism via
  lockdep_off()/lockdep_on().

일반적으로 아키텍처에서 불완전한 irq-flags-tracing 구현을 가질 위험이 없습니다.
lockdep는 이를 감지하고 스스로를 끕니다. 나는. 잠금 유효성 검사기는 여전히
신뢰할 수 있습니다. irq 추적 버그로 인해 충돌이 없어야합니다. (어셈블리가
변경되어서는 안되는 조건이나 레지스터를 수정하여 다른 코드를 깨뜨린 경우 제외)
In general there is no risk from having an incomplete irq-flags-tracing
implementation in an architecture: lockdep will detect that and will
turn itself off. I.e. the lock validator will still be reliable. There
should be no crashes due to irq-tracing bugs. (except if the assembly
changes break other code by modifying conditions or registers that
shouldn't be)

