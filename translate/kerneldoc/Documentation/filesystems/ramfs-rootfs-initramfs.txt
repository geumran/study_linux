ramfs, rootfs and initramfs
October 17, 2005
Rob Landley <rob@landley.net>
=============================

What is ramfs?
--------------

Ramfs는 리눅스의 디스크 캐싱 메커니즘(페이지 캐시와 dentry 캐시)을 기반으로 만들어진 동적으로 크기 조정이 가능한 RAM 기반 파일 시스템이다.
Ramfs is a very simple filesystem that exports Linux's disk caching mechanisms (the page cache and dentry cache) as a dynamically resizable RAM-based filesystem.

일반적으로 모든 파일은 Linux에 의해 메모리에 캐시된다. 백업 저장소 (일반적으로 파일 시스템이 마운트 된 블록 장치)에서 읽은 데이터 페이지는 다시 필요할 경우를 대비하여 보관되지만 가상 메모리 시스템이 다른 용도로 메모리를 필요로하는 경우 클린 (사용 가능)으로 표시된다. 마찬가지로 파일에 기록 된 데이터는 백업 저장소에 기록 되 자마자 깨끗하게 표시되지만 VM이 메모리를 다시 할당 할 때까지 캐싱을 위해 보관된다. 비슷한 메커니즘 (dentry 캐시)은 디렉토리에 대한 액세스 속도를 크게 향상시킵니다.
Normally all files are cached in memory by Linux.  Pages of data read from backing store (usually the block device the filesystem is mounted on) are kept around in case it's needed again, but marked as clean (freeable) in case the Virtual Memory system needs the memory for something else.  Similarly, data written to files is marked clean as soon as it has been written to backing store, but kept around for caching purposes until the VM reallocates the memory.  A similar mechanism (the dentry cache) greatly speeds up access to directories.

ramfs에는 backing storage가 없습니다. ramfs에 쓰여진 파일은 정상적으로 dentries와 page cache를 할당하지만, 거기에 쓸 곳이 없다. 즉, 페이지가 깨끗하게 표시되지 않으므로 메모리를 재생하려고 할 때 VM에서 해제 할 수 없습니다.
With ramfs, there is no backing store.  Files written into ramfs allocate dentries and page cache as usual, but there's nowhere to write them to.  This means the pages are never marked clean, so they can't be freed by the VM when it's looking to recycle memory.

ramfs를 구현하는 데 필요한 코드의 양은 매우 작습니다. 모든 작업이 기존의 Linux 캐싱 인프라로 수행되기 때문이다. 기본적으로 디스크 캐시를 파일 시스템으로 마운트한다. 이 때문에 ramfs는 무시할 수있는 공간 절약이 있기 때문에 menuconfig를 통해 제거 할 수있는 선택적 구성 요소는 아닙니다.
The amount of code required to implement ramfs is tiny, because all the work is done by the existing Linux caching infrastructure.  Basically, you're mounting the disk cache as a filesystem.  Because of this, ramfs is not an optional component removable via menuconfig, since there would be negligible space savings.

ramfs and ramdisk:
------------------

이전의 "램 디스크"메커니즘은 RAM 영역에서 합성 블록 장치를 생성하고이를 파일 시스템의 백업 저장소로 사용했습니다. 이 블록 장치는 고정 된 크기 였기 때문에 마운트 된 파일 시스템은 고정 된 크기였습니다. 램 디스크를 사용하면 가짜 블럭 장치에서 페이지 캐시로 메모리를 불필요하게 복사 (그리고 변경 사항을 다시 복사)하고 dentries를 생성 및 삭제해야했습니다. 게다가이 파일을 포맷하고 해석하기 위해 파일 시스템 드라이버 (예 : ext2)가 필요했습니다.
The older "ram disk" mechanism created a synthetic block device out of an area of RAM and used it as backing store for a filesystem.  This block device was of fixed size, so the filesystem mounted on it was of fixed size.  Using a ram disk also required unnecessarily copying memory from the fake block device into the page cache (and copying changes back out), as well as creating and destroying dentries.  Plus it needed a filesystem driver (such as ext2) to format and interpret this data.

RAMfs와 비교하면 메모리 (및 메모리 버스 대역폭)를 낭비하고 CPU에 불필요한 작업을 유발하며 CPU 캐시를 오염시킵니다. (페이지 테이블을 가지고 놀아서 복사하는 것을 피하기위한 트릭이 있지만, 어쨌든 복잡하기 때문에 복사만큼 비싸기 마련이다.) 더 중요한 것은 모든 작업 램프가 수행해야만한다는 것이다 _anyway_ 모든 파일 액세스는 페이지 및 덴트 리 캐시를 통과하므로 RAM 디스크는 단순히 불필요한다. ramfs는 내부적으로 훨씬 간단한다.
Compared to ramfs, this wastes memory (and memory bus bandwidth), creates unnecessary work for the CPU, and pollutes the CPU caches.  (There are tricks to avoid this copying by playing with the page tables, but they're unpleasantly complicated and turn out to be about as expensive as the copying anyway.) More to the point, all the work ramfs is doing has to happen _anyway_, since all file access goes through the page and dentry caches.  The RAM disk is simply unnecessary; ramfs is internally much simpler.


램 디스크가 반쯤 쓸모 없게 된 또 다른 이유는 루프백 장치를 도입하면 메모리 블록이 아닌 파일에서 합성 블록 장치를 만드는 데보다 유연하고 편리한 방법이 제공된다는 것이다. 자세한 내용은 losetup (8)을 참조하십시오.
Another reason ramdisks are semi-obsolete is that the introduction of loopback devices offered a more flexible and convenient way to create synthetic block devices, now from files instead of from chunks of memory.  See losetup (8) for details.

ramfs and tmpfs:
----------------

의 단점은 모든 메모리를 다 채울 때까지 데이터를 계속 쓸 수 있다는 것이다. VM은 파일이 공간을 스왑하지 않고 파일을 백업 스토어에 기록해야한다고 생각하기 때문에 VM을 해제 할 수는 없지만 ramfs는 ' 어떤 후원 가게도 갖고 있지 않아. 이 때문에 루트 (또는 신뢰할 수있는 사용자)만이 ramfs 마운트에 대한 쓰기 액세스를 허용해야한다.
One downside of ramfs is you can keep writing data into it until you fill up all memory, and the VM can't free it because the VM thinks that files should get written to backing store (rather than swap space), but ramfs hasn't got any backing store.  Because of this, only root (or a trusted user) should be allowed write access to a ramfs mount.

크기 제한을 추가하고 데이터를 스왑 공간에 쓰는 기능을 추가하기 위해 tmpfs라는 ramfs 파생물을 만들었습니다. 일반 사용자는 tmpfs 마운트에 대한 쓰기 액세스를 허용 할 수 있다. 자세한 내용은 Documentation / filesystems / tmpfs.txt를 참조하십시오.
A ramfs derivative called tmpfs was created to add size limits, and the ability to write the data to swap space.  Normal users can be allowed write access to tmpfs mounts.  See Documentation/filesystems/tmpfs.txt for more information.

What is rootfs?
---------------

Rootfs는 2.6 시스템에 항상 존재하는 ramfs (또는 활성화 된 경우 tmpfs)의 특별한 인스턴스이다. init 프로세스를 죽일 수없는 것과 거의 같은 이유로 rootfs를 마운트 해제 할 수 없습니다. 빈리스트를 검사하고 처리하는 특별한 코드를 갖는 것보다, 커널이 특정리스트가 비게 될 수 없도록 만드는 것이 더 작고 간단하다.
Rootfs is a special instance of ramfs (or tmpfs, if that's enabled), which is always present in 2.6 systems.  You can't unmount rootfs for approximately the same reason you can't kill the init process; rather than having special code to check for and handle an empty list, it's smaller and simpler for the kernel to just make sure certain lists can't become empty.

대부분의 시스템은 rootfs를 통해 다른 파일 시스템을 마운트하고 무시한다. ramfs의 빈 인스턴스가 차지하는 공간은 아주 작습니다.
Most systems just mount another filesystem over rootfs and ignore it.  The amount of space an empty instance of ramfs takes up is tiny.

CONFIG_TMPFS가 활성화되면 rootfs는 기본적으로 ramfs 대신 tmpfs를 사용한다. ramfs를 강제 실행하려면 "rootfstype = ramfs"를 커널 명령 행에 추가하십시오.
If CONFIG_TMPFS is enabled, rootfs will use tmpfs instead of ramfs by default.  To force ramfs, add "rootfstype=ramfs" to the kernel command line.

What is initramfs?
------------------

모든 2.6 Linux 커널에는 gzip으로 압축 된 "cpio" 형식의 압축파일이 들어 있으며, 커널 부팅중에 rootfs로 추출된다. 압축을 푼 후 커널은 rootfs에 "init" 파일이 있는지 검사하고, 있으면 PID 1로 실행한다. 이 init 프로세스는 시스템의 나머지를 동작시키고 실제 root device(존재한다면)를 locating and mounting하는 작업을 담당한다. 커널에 포함된 cpio archive가 압축해제된 (init)rootfs에 PID1로 실행할 init 프로그램이 없다면, 커널은 루트 파티션을 찾아서 마운트하기 위해 이전 코드로 빠져 나간 다음 /sbin/init을 실행한다.
All 2.6 Linux kernels contain a gzipped "cpio" format archive, which is extracted into rootfs when the kernel boots up.  After extracting, the kernel checks to see if rootfs contains a file "init", and if so it executes it as PID 1.  If found, this init process is responsible for bringing the system the rest of the way up, including locating and mounting the real root device (if any).  If rootfs does not contain an init program after the embedded cpio archive is extracted into it, the kernel will fall through to the older code to locate and mount a root partition, then exec some variant of /sbin/init out of that.


몇가지 부분에서 예전 initrd와 initramfs는 아래와 같이 다르다.
All this differs from the old initrd in several ways:

- 이전 initrd는 항상 별도의 파일이었지만 initramfs 아카이브는 Linux 커널 이미지에 연결된다.(linux-*/usr 디렉토리는 빌드 중에이 아카이브를 생성하는 데에만 사용된다.)
- The old initrd was always a separate file, while the initramfs archive is linked into the linux kernel image.  (The directory linux-*/usr is devoted to generating this archive during the build.)

- initramfs 아카이브가 gzip으로 압축 된 cpio 아카이브인 반면에 (tar와 유사하지만 더 심플하다, cpio(1)와  Documentation/early-userspace/buffer-format.txt를 참고하자.) 예전 initrd 파일은 gzip으로 압축 된 파일시스템 이미지(커널에 내장 된 드라이버가 필요한 ext2와 같은 일부 파일 형식)이다. 커널의 cpio 해제 코드는 매우 작을뿐만 아니라 부팅 과정에서 폐기 될 수있는 텍스트 및 데이터이다.
- The old initrd file was a gzipped filesystem image (in some file format, such as ext2, that needed a driver built into the kernel), while the new initramfs archive is a gzipped cpio archive (like tar only simpler, see cpio(1) and Documentation/early-userspace/buffer-format.txt).  The kernel's cpio extraction code is not only extremely small, it's also __init text and data that can be discarded during the boot process.

- initramfs의 init 프로그램이 커널로 리턴되지 않을 것으로 예상되는 반면에,  이전 initrd(/init이 아닌 /initrd라 불린다)에서 실행 된 프로그램은 일부 설정을 수행 한 다음 커널로 리턴된다. (만약 /init가 제어권을 넘겨 주어야 한다면, 새로운 root 장치로 overmount/over 할 수 있고 다른 init 프로그램을 exec 할 수 있다. 아래의 switch_root 유틸리티를보십시오).
- The program run by the old initrd (which was called /initrd, not /init) did some setup and then returned to the kernel, while the init program from initramfs is not expected to return to the kernel.  (If /init needs to hand off control it can overmount / with a new root device and exec another init program.  See the switch_root utility, below.)

- 다른 루트 장치를 전환 할 때 initrd는 pivot_root를 입력 한 다음 램 디스크를 마운트 해제한다. 그러나 initramfs는 rootfs이다. rootfs를 pivot_root 할 수도없고 마운트 해제 할 수도 없습니다. 대신 rootfs를 모두 삭제하여 공간을 확보하십시오 (find -xdev / -exec rm '{}' ';'), rootfs를 새로운 루트 (cd / newmount; mount - move. /; chroot)로 오버 마운트하십시오. 새로운 / dev / console에 stdin / stdout / stderr을 붙이고 새로운 init을 실행하십시오.
- When switching another root device, initrd would pivot_root and then umount the ramdisk.  But initramfs is rootfs: you can neither pivot_root rootfs, nor unmount it.  Instead delete everything out of rootfs to free up the space (find -xdev / -exec rm '{}' ';'), overmount rootfs with the new root (cd /newmount; mount --move . /; chroot .), attach stdin/stdout/stderr to the new /dev/console, and exec the new init.

이것은 매우 당황스럽고 실행하기 전에 명령을 삭제하는 과정이므로 klibc 패키지는 helper 프로그램 (utils / run_init.c)을 도입하여이 모든 작업을 수행한다. 다른 대부분의 패키지 (예 : busybox)는이 명령의 이름을 "switch_root"로 지정했습니다.
Since this is a remarkably persnickety process (and involves deleting commands before you can run them), the klibc package introduced a helper program (utils/run_init.c) to do all this for you.  Most other packages (such as busybox) have named this command "switch_root".

Populating initramfs:
---------------------

2.6 커널 빌드 프로세스는 항상 gzip으로 압축 된 cpio 형식의 initramfs 아카이브를 생성하고이를 결과 커널 바이너리에 연결한다. 기본적으로이 아카이브는 비어 있다 (x86에서 134 바이트 사용).
The 2.6 kernel build process always creates a gzipped cpio format initramfs archive and links it into the resulting kernel binary.  By default, this archive is empty (consuming 134 bytes on x86).

설정 옵션 CONFIG_INITRAMFS_SOURCE (menuconfig의 일반 설정에서, 그리고 / usr / Kconfig에 있음)를 사용하여 자동으로 결과 바이너리에 통합되는 initramfs 아카이브의 소스를 지정할 수 있다. 이 옵션은 기존 gzip으로 압축 된 cpio 아카이브, 아카이브 할 파일이있는 디렉토리 또는 다음 예제와 같은 텍스트 파일 스펙을 가리킬 수 있다.
The config option CONFIG_INITRAMFS_SOURCE (in General Setup in menuconfig, and living in usr/Kconfig) can be used to specify a source for the initramfs archive, which will automatically be incorporated into the resulting binary.  This option can point to an existing gzipped cpio archive, a directory containing files to be archived, or a text file specification such as the following example:

  dir /dev 755 0 0
  nod /dev/console 644 0 0 c 5 1
  nod /dev/loop0 644 0 0 b 7 0
  dir /bin 755 1000 1000
  slink /bin/sh busybox 777 0 0
  file /bin/busybox initramfs/busybox 755 0 0
  dir /proc 755 0 0
  dir /sys 755 0 0
  dir /mnt 755 0 0
  file /init initramfs/init.sh 755 0 0

"usr / gen_init_cpio"(커널 빌드 후)를 실행하여 위 파일 형식을 설명하는 사용법 메시지를 얻으십시오.
Run "usr/gen_init_cpio" (after the kernel build) to get a usage message documenting the above file format.

구성 파일의 한 가지 장점은 새 아카이브에서 사용 권한을 설정하거나 장치 노드를 만드는 데 루트 액세스가 필요하지 않다는 것이다. (이 두 예제 "file"항목은 linux-2.6. * 디렉토리의 "initramfs"디렉토리에서 "init.sh"및 "busybox"라는 파일을 찾을 것으로 예상된다. Documentation / early-userspace / README를 참조하십시오. 자세한 내용은.)
One advantage of the configuration file is that root access is not required to set permissions or create device nodes in the new archive.  (Note that those two example "file" entries expect to find files named "init.sh" and "busybox" in a directory called "initramfs", under the linux-2.6.* directory.  See Documentation/early-userspace/README for more details.)

커널은 외부 cpio 도구에 의존하지 않습니다. 구성 파일 대신 디렉토리를 지정하면 커널의 빌드 기반 구조는 해당 디렉토리 (usr / Makefile이 scripts / gen_initramfs_list.sh를 호출)에서 구성 파일을 생성하고 구성 파일을 사용하여 해당 디렉토리를 패키지화한다 ( usr / gen_init_cpio, 이는 usr / gen_init_cpio.c에서 생성된다). 커널의 빌드 타임 cpio 생성 코드는 완전히 독립적이며, 커널의 부트 타임 추출기는 (분명히) 자체 포함되어 있다.
The kernel does not depend on external cpio tools.  If you specify a directory instead of a configuration file, the kernel's build infrastructure creates a configuration file from that directory (usr/Makefile calls scripts/gen_initramfs_list.sh), and proceeds to package up that directory using the config file (by feeding it to usr/gen_init_cpio, which is created from usr/gen_init_cpio.c).  The kernel's build-time cpio creation code is entirely self-contained, and the kernel's boot-time extractor is also (obviously) self-contained.

당신이 외부 cpio 유틸리티를 설치해야 할 필요가있는 한 가지는 구성 파일이나 디렉토리 대신에 커널 빌드에 제공 할 수 있도록 미리 준비된 cpio 파일을 생성하거나 추출하는 것이다.
The one thing you might need external cpio utilities installed for is creating or extracting your own preprepared cpio files to feed to the kernel build (instead of a config file or directory).

다음 명령 줄은 위의 스크립트 또는 커널 빌드에 의해 cpio 이미지를 구성 요소 파일로 다시 추출 할 수 있다.
The following command line can extract a cpio image (either by the above script or by the kernel build) back into its component files:

  cpio -i -d -H newc -F initramfs_data.cpio --no-absolute-filenames

다음 쉘 스크립트는 위의 설정 파일 대신 사용할 수있는 사전 빌드 된 cpio 아카이브를 생성 할 수 있다.
The following shell script can create a prebuilt cpio archive you can use in place of the above config file:

  #!/bin/sh

  # Copyright 2006 Rob Landley <rob@landley.net> and TimeSys Corporation.
  # Licensed under GPL version 2

  if [ $# -ne 2 ]
  then
    echo "usage: mkinitramfs directory imagename.cpio.gz"
    exit 1
  fi

  if [ -d "$1" ]
  then
    echo "creating $2 from $1"
    (cd "$1"; find . | cpio -o -H newc | gzip) > "$2"
  else
    echo "First argument must be a directory"
    exit 1
  fi

참고 : cpio man 페이지에는 initramfs 아카이브를 따를 경우 손상 될 수있는 잘못된 조언이 포함되어 있다. "파일 이름 목록을 생성하는 일반적인 방법은 find 명령을 사용하는 것이므로 쓸 수 없거나 검색 할 수없는 디렉토리에 대한 사용 권한 문제를 최소화하려면 -depth 옵션을 제공해야한다." initramfs.cpio.gz 이미지를 만들 때 이렇게하지 마십시오. 작동하지 않습니다. Linux 커널 cpio 추출기는 존재하지 않는 디렉토리에 파일을 작성하지 않으므로 디렉토리 항목은 해당 디렉토리에있는 파일보다 먼저 실행해야한다. 위의 스크립트는 올바른 순서로 가져옵니다.
Note: The cpio man page contains some bad advice that will break your initramfs archive if you follow it.  It says "A typical way to generate the list of filenames is with the find command; you should give find the -depth option to minimize problems with permissions on directories that are unwritable or not searchable."  Don't do this when creating initramfs.cpio.gz images, it won't work.  The Linux kernel cpio extractor won't create files in a directory that doesn't exist, so the directory entries must go before the files that go in those directories.  The above script gets them in the right order.

External initramfs images:
--------------------------

커널에 initrd 지원이 활성화되어 있으면 외부 cpio.gz 아카이브를 initrd 대신 2.6 커널에 전달할 수도 있다. 이 경우 커널은 init (initram이 아닌 initramfs)을 자동 감지하고 / init를 실행하기 전에 외부 cpio 아카이브를 rootfs로 추출한다.
If the kernel has initrd support enabled, an external cpio.gz archive can also be passed into a 2.6 kernel in place of an initrd.  In this case, the kernel will autodetect the type (initramfs, not initrd) and extract the external cpio archive into rootfs before trying to run /init.

이것은 initramfs (램 디스크 블록 장치 없음)의 메모리 효율성 이점을 가지고 있지만, initrd의 별도 패키징 (initramfs에서 실행하고자하는 비 GPL 코드가 있으면 GPL 라이센스 리눅스 커널 바이너리 ).
This has the memory efficiency advantages of initramfs (no ramdisk block device) but the separate packaging of initrd (which is nice if you have non-GPL code you'd like to run from initramfs, without conflating it with the GPL licensed Linux kernel binary).

커널의 내장 initramfs 이미지를 보완하는 데에도 사용할 수 있다. 외부 아카이브의 파일은 내장 된 initramfs 아카이브의 모든 충돌 파일을 덮어 씁니다. 일부 배포자는 다시 컴파일하지 않고도 작업 관련 initramfs 이미지로 단일 커널 이미지를 사용자 정의하는 것을 선호한다.
It can also be used to supplement the kernel's built-in initramfs image.  The files in the external archive will overwrite any conflicting files in the built-in initramfs archive.  Some distributors also prefer to customize a single kernel image with task-specific initramfs images, without recompiling.

Contents of initramfs:
----------------------

initramfs 아카이브는 리눅스를위한 완벽한 독립형 루트 파일 시스템이다. 최소한의 루트 파일 시스템을 만들고 실행하는 데 필요한 공유 라이브러리, 장치 및 경로를 아직 이해하지 못했다면 다음을 참조하십시오.
An initramfs archive is a complete self-contained root filesystem for Linux.  If you don't already understand what shared libraries, devices, and paths you need to get a minimal root filesystem up and running, here are some references:

http://www.tldp.org/HOWTO/Bootdisk-HOWTO/
http://www.tldp.org/HOWTO/From-PowerUp-To-Bash-Prompt-HOWTO.html
http://www.linuxfromscratch.org/lfs/view/stable/

"klibc"패키지 (http://www.kernel.org/pub/linux/libs/klibc)는 일부 관련 유틸리티와 함께 ​​초기 사용자 공간 코드를 정적으로 연결하는 작은 C 라이브러리로 설계되었다. BSD 라이센스이다.
The "klibc" package (http://www.kernel.org/pub/linux/libs/klibc) is designed to be a tiny C library to statically link early userspace code against, along with some related utilities.  It is BSD licensed.

나는 uClibc (http://www.uclibc.org)와 busybox (http://www.busybox.net)를 사용한다. 이들은 각각 LGPL과 GPL이다. (자체 포함 initramfs 패키지는 busybox 1.3 릴리스 용으로 계획되었다.)
I use uClibc (http://www.uclibc.org) and busybox (http://www.busybox.net) myself.  These are LGPL and GPL, respectively.  (A self-contained initramfs package is planned for the busybox 1.3 release.)

이론적으로는 glibc를 사용할 수 있지만, 이와 같이 작은 임베디드 용도에는 적합하지 않습니다. (glibc에 정적으로 링크 된 "hello world"프로그램은 400k 이상이고, uClibc에서는 7k이다. 정적으로 링크 된 경우에도 glibc가 이름 조회를 수행한다.)
In theory you could use glibc, but that's not well suited for small embedded uses like this.  (A "hello world" program statically linked against glibc is over 400k.  With uClibc it's 7k.  Also note that glibc dlopens libnss to do name lookups, even when otherwise statically linked.)

initramfs가 init과 같이 정적으로 링크 된 "hello world"프로그램을 실행하게하고 qemu (www.qemu.org) 또는 User Mode Linux와 같은 에뮬레이터에서 테스트한다.
A good first step is to get initramfs to run a statically linked "hello world" program as init, and test it under an emulator like qemu (www.qemu.org) or User Mode Linux, like so:

  cat > hello.c << EOF
  #include <stdio.h>
  #include <unistd.h>

  int main(int argc, char *argv[])
  {
    printf("Hello world!\n");
    sleep(999999999);
  }
  EOF
  gcc -static hello.c -o init
  echo init | cpio -o -H newc | gzip > test.cpio.gz
  # Testing external initramfs using the initrd loading mechanism.
  qemu -kernel /boot/vmlinuz -initrd test.cpio.gz /dev/zero

일반 루트 파일 시스템을 디버깅 할 때 "init = / bin / sh"를 사용하여 부팅하는 것이 좋습니다. initramfs와 동등한 것은 "rdinit = / bin / sh"이며, 마찬가지로 유용한다.
When debugging a normal root filesystem, it's nice to be able to boot with "init=/bin/sh".  The initramfs equivalent is "rdinit=/bin/sh", and it's just as useful.

Why cpio rather than tar?
-------------------------

이 결정은 2001 년 12 월에 이루어졌습니다. 여기에서 토론이 시작되었다 :
This decision was made back in December, 2001.  The discussion started here:

  http://www.uwsg.iu.edu/hypermail/linux/kernel/0112.2/1538.html

그리고 여기에서 시작하여 두 번째 스레드 (특히 tar와 cpio)를 생성한다.
And spawned a second thread (specifically on tar vs cpio), starting here:

  http://www.uwsg.iu.edu/hypermail/linux/kernel/0112.2/1587.html

빠르고 위의 요약 버젼 (위의 쓰레드를 읽을 수있는 것은 아닙니다)은 다음과 같습니다 :
The quick and dirty summary version (which is no substitute for reading the above threads) is:

1) cpio는 표준이다. AT & T 시대의 수십 년 전부터 이미 Linux (RPM, Red Hat의 장치 드라이버 디스크)에서 널리 사용되었다. 1996 년부터 리눅스 저널 기사가 있다 :
1) cpio is a standard.  It's decades old (from the AT&T days), and already widely used on Linux (inside RPM, Red Hat's device driver disks).  Here's a Linux Journal article about it from 1996:

      http://www.linuxjournal.com/article/1213



전통적인 cpio 명령 줄 도구는 _truly_hideous_ 명령 줄 인수를 필요로하기 때문에 tar만큼 대중적이지 않습니다. 그러나 이것은 아카이브 형식에 대해 아무런 의미가 없으며 다음과 같은 대체 도구가 있다.
It's not as popular as tar because the traditional cpio command line tools require _truly_hideous_ command line arguments.  But that says nothing either way about the archive format, and there are alternative tools, such as:

     http://freecode.com/projects/afio

2) 커널에 의해 선택된 cpio 아카이브 형식은 다양한 tar 아카이브 형식 중 (말 그대로 수십 가지)보다 간단하고 깨끗한다 (따라서 생성 및 구문 분석이 더 쉽습니다). 완전한 initramfs 아카이브 형식은 buffer-format.txt에 설명되어 있으며, usr / gen_init_cpio.c에서 생성되고 init / initramfs.c에서 추출된다. 세 명 모두 합쳐서 26k 미만의 사람이 읽을 수있는 텍스트가 나온다.
2) The cpio archive format chosen by the kernel is simpler and cleaner (and thus easier to create and parse) than any of the (literally dozens of) various tar archive formats.  The complete initramfs archive format is explained in buffer-format.txt, created in usr/gen_init_cpio.c, and extracted in init/initramfs.c.  All three together come to less than 26k total of human-readable text.

3) tar를 표준화하는 GNU 프로젝트는 Windows의 zip 표준화와 거의 비슷한다. 리눅스는 어느 쪽이든의 일부가 아니며, 자유롭게 자체 기술 결정을 내릴 수 있다.
3) The GNU project standardizing on tar is approximately as relevant as Windows standardizing on zip.  Linux is not part of either, and is free to make its own technical decisions.

4) 이것은 커널 내부 형식이기 때문에 쉽게 새로운 것이 될 수 있다. 커널은 어쨌든이 형식을 만들고 추출 할 수있는 자체 도구를 제공한다. 기존 표준을 사용하는 것이 좋았지 만 필수적인 것은 아닙니다.
4) Since this is a kernel internal format, it could easily have been something brand new.  The kernel provides its own tools to create and extract this format anyway.  Using an existing standard was preferable, but not essential.

5) 알 비로 (Al Viro)가 결정을 내렸다. ( "타르는 지옥처럼 추악하고 커널 쪽에서는 지원하지 않을 것이다")
5) Al Viro made the decision (quote: "tar is ugly as hell and not going to be supported on the kernel side"):

      http://www.uwsg.iu.edu/hypermail/linux/kernel/0112.2/1540.html

   그의 추론을 설명했다.
   explained his reasoning:

      http://www.uwsg.iu.edu/hypermail/linux/kernel/0112.2/1550.html
      http://www.uwsg.iu.edu/hypermail/linux/kernel/0112.2/1638.html

   전통적인 cpio 명령 줄 도구는 _truly_hideous_ 명령 줄 인수를 필요로하기 때문에 tar만큼 대중적이지 않습니다. 그러나 이것은 아카이브 형식에 대해 아무런 의미가 없으며 다음과 같은 대체 도구가 있다.

   가장 중요한 것은 initramfs 코드를 설계하고 구현 한 것이다.
   and, most importantly, designed and implemented the initramfs code.

Future directions:
------------------

오늘 (2.6.16) initramfs는 항상 컴파일되지만 항상 사용되는 것은 아닙니다. 커널은 initramfs에 / init 프로그램이없는 경우에만 도달하는 레거시 부트 코드로 되돌아갑니다. 그 후유증은 유산 코드이며 원활한 이전을 보장하고 조기 부팅 기능을 점차적으로 "초기 사용자 공간"(I.E. initramfs)으로 옮길 수 있다.
Today (2.6.16), initramfs is always compiled in, but not always used.  The kernel falls back to legacy boot code that is reached only if initramfs does not contain an /init program.  The fallback is legacy code, there to ensure a smooth transition and allowing early boot functionality to gradually move to "early userspace" (I.E. initramfs).

실제 루트 장치를 찾아서 마운트하는 것이 복잡하기 때문에 초기 사용자 공간으로 이동해야한다. 루트 파티션은 여러 장치에 걸쳐있을 수 있다 (raid 또는 separate journal). 그들은 네트워크에있을 수 있다 (dhcp 필요, 특정 MAC 주소 설정, 서버 로그인 등). 이동식 미디어에서 동적으로 할당 된 메이저 / 마이너 번호와 영구적 인 명명 문제를 해결하기 위해 udev 구현을 완료해야한다. 압축, 암호화, 쓰기 복사, 루프백 마운트, 이상하게 파티션 된 등의 작업을 수행 할 수 있다.
The move to early userspace is necessary because finding and mounting the real root device is complex.  Root partitions can span multiple devices (raid or separate journal).  They can be out on the network (requiring dhcp, setting a specific MAC address, logging into a server, etc).  They can live on removable media, with dynamically allocated major/minor numbers and persistent naming issues requiring a full udev implementation to sort out.  They can be compressed, encrypted, copy-on-write, loopback mounted, strangely partitioned, and so on.

이러한 종류의 복잡성 (필연적으로 정책 포함)은 사용자 공간에서 올바르게 처리된다. klibc와 busybox / uClibc는 모두 간단한 initramfs 패키지에서 커널 빌드에 포함된다.
This kind of complexity (which inevitably includes policy) is rightly handled in userspace.  Both klibc and busybox/uClibc are working on simple initramfs packages to drop into a kernel build.

klibc 패키지는 이제 Andrew Morton의 2.6.17mm 트리에 채택되었다. 커널의 현재 초기 부트 코드 (파티션 탐지 등)는 커널 빌드에 의해 자동으로 생성되고 사용되는 기본 initramfs로 마이그레이션 될 것이다.
The klibc package has now been accepted into Andrew Morton's 2.6.17-mm tree.  The kernel's current early boot code (partition detection, etc) will probably be migrated into a default initramfs, automatically created and used by the kernel build.
